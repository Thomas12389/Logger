/*************************************************************************
	> File Name: test_log.cpp
	> Author: 
	> Mail: 
	> Created Time: Fri 26 Feb 2021 09:39:04 AM CST
 ************************************************************************/

#include <iostream>
// #include "spdlog/spdlog.h"
// #include "spdlog/sinks/rotating_file_sink.h"
// #include "spdlog/sinks/ansicolor_sink.h"

#include "Logger.h"
using namespace std;

std::mutex w_lck;

std::shared_ptr<spdlog::logger> test_get(std::string logger_name) {
	auto logger = spdlog::get(logger_name);
	return logger;
}

void one_thread(std::shared_ptr<spdlog::logger>& logger_) {
	// std::cout << "11111111111111" << std::endl;
	
	for (int i = 0; i < 10; i++) {
		std::lock_guard<std::mutex> lock(w_lck);
		logger_->critical("Hello, {} {}!", "lala", i);
	}
}

void xxthread() {
	std::cout << "11111111111111" << std::endl;
	for (int i = 0; i < 10; i++) {
		std::cout << "11111111111111" << std::endl;
	}

}

void *test_thread(void *arg) {
	for (int i = 0; i < 2; i++) {
		
		XLOG_TRACE("hello {}", i);
		XLOG_DEBUG("hello {}", i);
		XLOG_INFO("hello {}", i);
		XLOG_WARN("hello {}", i);
		XLOG_ERROR("hello {}", i);
		XLOG_CRITICAL("hello {}", i);
		
	}
	pthread_exit(NULL);
}

int main() {
#if 1
	XLogger::getInstance()->InitXLogger("test.log");
	XLOG_INFO("Starting...");
	printf("%d\n", SPDLOG_ACTIVE_LEVEL);
	pthread_t tid;
	pthread_create(&tid, NULL, test_thread, NULL);
	pthread_join(tid, NULL);
	XLOG_INFO("Ending...");
#else
	spdlog::info("Hello, {} {}!", "lala", 100);
	spdlog::critical("Hello, {} {}!", "lala", 100);
	auto file_logger = spdlog::rotating_logger_mt("file_logger", "logs/mylog", 10, 2);
	std::cout << "file_logger pointer: " << file_logger << std::endl;
	// spdlog::register_logger(file_logger);
	for (int i = 0; i < 10; i++) {
		// file_logger->critical("Hello, {} {0:4d} {0:4d}!", "lala", i, i * 10);
		spdlog::info("Hello, {} {:04d} {}!", "lala", i, (long long)i * 100000000000000000000001);
	}

	auto xxx = test_get("file_logger");
	std::cout << "xxx pointer: " << xxx << std::endl;

	auto sharedSink = std::make_shared<spdlog::sinks::ansicolor_stderr_sink_mt>(spdlog::color_mode::automatic);
	auto oneLogger = std::make_shared<spdlog::logger>("one", sharedSink);
	auto twoLogger = std::make_shared<spdlog::logger>("two", sharedSink);
	
	// std::thread tid(std::ref(xxthread));
	// tid.detach();
	// std::thread t1(&one_thread, std::ref(oneLogger));
	// t1.detach();
	// std::thread t2(&one_thread, std::ref(twoLogger));
	// t2.join();
	sleep(1);
#endif
	return 0;
}